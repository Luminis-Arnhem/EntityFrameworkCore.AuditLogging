using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Luminis.EntityFramework.AuditLogging.Attributes;
using Luminis.EntityFrameworkCore.AuditLogging.Exceptions;
using Luminis.EntityFrameworkCore.AuditLogging.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace Luminis.EntityFrameworkCore.AuditLogging
{
    public class AuditLoggingContext : DbContext
    {
        private readonly IUserIdProvider _userIdProvider;
        private readonly bool _persistAllProperties;

        public AuditLoggingContext(IUserIdProvider userIdProvider, bool persistAllProperties = false)
        {
            _userIdProvider = userIdProvider;
            _persistAllProperties = persistAllProperties;
        }

        public AuditLoggingContext(DbContextOptions options, IUserIdProvider userIdProvider, bool persistAllProperties = false) : base(options)
        {
            _userIdProvider = userIdProvider;
            _persistAllProperties = persistAllProperties;
        }

        public DbSet<AuditLog> Audits { get; set; } = default!;

        public override int SaveChanges(bool acceptAllChangesOnSuccess)
        {
            var auditEntries = OnBeforeSaveChanges();
            var result = base.SaveChanges(acceptAllChangesOnSuccess);
            OnAfterSaveChanges(auditEntries).Wait();
            return result;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AuditLog>()
                .Property(a => a.Action)
                .HasConversion<string>()
                .HasMaxLength(32);
            base.OnModelCreating(modelBuilder);
        }

        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default)
        {
            var auditEntries = OnBeforeSaveChanges();
            var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            await OnAfterSaveChanges(auditEntries);
            return result;
        }

        private List<AuditEntry> OnBeforeSaveChanges()
        {
            var transactionId = Guid.NewGuid();

            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.State == EntityState.Detached || entry.State == EntityState.Unchanged || !ShouldAudit(entry))
                {
                    continue;
                }

                var auditEntry = new AuditEntry(entry, transactionId, _userIdProvider.GetUserId())
                {
                    TableName = entry!.Metadata.GetTableName()
                };
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (!ShoudAudit(property))
                    {
                        continue;
                    }
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    var propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Added:
                            auditEntry.NewValues[propertyName] = property.CurrentValue;
                            break;

                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (_persistAllProperties || property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                if (auditEntry.OldValues.Any() || auditEntry.NewValues.Any())
                {
                    Audits.Add(auditEntry.ToAudit());
                }
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList();
        }

        private Task OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
            {
                return Task.CompletedTask;
            }

            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                if (auditEntry.OldValues.Any() || auditEntry.NewValues.Any())
                {
                    Audits.Add(auditEntry.ToAudit());
                }
            }

            return SaveChangesAsync();
        }

        private static bool ShouldAudit(EntityEntry entityEntry) 
            => entityEntry.Entity.GetType().GetCustomAttributes(typeof(AuditAttribute), false).Length > 0;

        private static bool ShoudAudit(PropertyEntry property)
        {
            if (property.Metadata.IsShadowProperty())
            {
                throw new AuditLoggingException($"Cannot audit with shadow properties. Please supply a property for {property.Metadata.Name}");
            }
            return !property.Metadata.PropertyInfo.GetCustomAttributes(typeof(AuditIgnoreAttribute), false).Any();
        }
    }
}
